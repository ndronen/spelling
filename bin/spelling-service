#!/usr/bin/env python

from __future__ import print_function
import sys
import argparse
import json
import requests
import xmltodict
import numpy as np

def main(args):
    text = args.text.read().strip()
    body = {
            'sent-split': False, 'sent-start': False,
            'sent-end': False, 'case-sensitive': True,
            'text': text
            }
    url = args.host + args.url
    response = requests.post(url, data=json.dumps(body))

    def print_http_error(response):
        print("HTTP error %d %s %s" % (
            response.status_code,
            response.reason,
            response.text), file=sys.stderr)

    def print_service_error(response):
        print("Service error %s" % (
            response.text), file=sys.stderr)

    if int(response.status_code) != 200:
        print_http_error(response)
    else:
        response_dict = xmltodict.parse(response.text)
        spellcheck = response_dict['pktServiceResponse']['spellCheck']
        print("\t".join([
            "Context", "NonWord", "Suggestion", "NgramRatio"]))
        for word,values in spellcheck['content']['wordList'].items():
            original_word = values['originalWord']
            for replacement in values['replacement']:
                print("\t".join([
                    text,
                    original_word,
                    replacement['#text'],
                    replacement['@ngram-ratio']]))

def build_parser():
    parser = argparse.ArgumentParser(
            description="Correct spelling using the Boulder Labs Grammar5 spelling service")
    aa = parser.add_argument
    aa("--text", type=argparse.FileType("r"), default=sys.stdin,
            help="The input file (or stdin)")
    aa("--url", type=str,
            default="/pkt-aggregator/Service/spelling",
            help="The path component of the URL of the spelling service")
    aa("--host", type=str, 
            help="The host of the spelling service")

    args = parser.parse_args()

    return args

if __name__ == "__main__":
    sys.exit(main(build_parser()) == True)
