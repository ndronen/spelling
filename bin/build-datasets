#!/usr/bin/env python

from __future__ import print_function

import inspect
path = inspect.getfile(inspect.currentframe())
from os.path import dirname, split
import sys
sys.path.append(dirname(split(path)[0]))

import argparse
from spelling.jobs import SplitCSVDataset, BuildDatasetFromCSV

def main(args):
    input_csv = args.input_csv
    output_csv = args.output_csv

    if args.subcommand == "split":
        SplitCSVDataset(input_csv, output_csv).run()
    elif args.subcommand == "build":
        BuildDatasetFromCSV(input_csv, output_csv).run()

def build_parser():
    parser = argparse.ArgumentParser(
        description='Split a data frame of (word, error, *other) rows into one file per word or build a dataset')
    parser.add_argument('subcommand', metavar='SUBCOMMAND', type=str, choices=["split", "build"],
        help='A subcommand, either "split" or "build"')
    parser.add_argument('input_csv', metavar='INPUT_CSV', type=str,
        help='Path to input CSV')
    parser.add_argument('output_csv', metavar='OUTPUT_CSV', type=str,
        help='Path to output CSV; assumed to be a format string containing "%d" when SUBCOMMAND is "split"')
    args = parser.parse_args()

    if args.subcommand == 'split':
        if '%' not in args.output_csv:
            raise ValueError('"OUTPUT_CSV" must be a format string containing "%d"')

    return args

if __name__ == "__main__":
    try:
        sys.exit(main(build_parser()))
    except KeyboardInterrupt:
        print("Interrupted")
